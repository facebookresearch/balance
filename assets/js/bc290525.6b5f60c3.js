"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[919],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>l,MDXProvider:()=>p,mdx:()=>h,useMDXComponents:()=>u,withMDXComponents:()=>m});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){return function(t){var n=u(t.components);return a.createElement(e,i({},t,{components:n}))}},u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),m=u(n),p=r,g=m["".concat(o,".").concat(p)]||m[p]||c[p]||i;return n?a.createElement(g,s(s({ref:t},l),{},{components:n})):a.createElement(g,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},95811:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=n(9668),r=n(21367),i=(n(96540),n(15680)),o=["components"],s={id:"evaluation_of_results",title:"Evaluating and using the adjustment weights",description:"Diagnosing, evaluating, and using the weighted adjusted sample",sidebar_position:3,keywords:["diagnostics","evaluation","results"]},d=void 0,l={unversionedId:"docs/general_framework/evaluation_of_results",id:"docs/general_framework/evaluation_of_results",title:"Evaluating and using the adjustment weights",description:"Diagnosing, evaluating, and using the weighted adjusted sample",source:"@site/docs/docs/general_framework/evaluation_of_results.md",sourceDirName:"docs/general_framework",slug:"/docs/general_framework/evaluation_of_results",permalink:"/docs/docs/general_framework/evaluation_of_results",draft:!1,editUrl:"https://github.com/facebookresearch/balance/tree/main/website/docs/docs/general_framework/evaluation_of_results.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"evaluation_of_results",title:"Evaluating and using the adjustment weights",description:"Diagnosing, evaluating, and using the weighted adjusted sample",sidebar_position:3,keywords:["diagnostics","evaluation","results"]},sidebar:"docsSidebar",previous:{title:"Adjusting Sample to Population",permalink:"/docs/docs/general_framework/adjusting_sample_to_population"},next:{title:"Statistical Methods",permalink:"/docs/docs/statistical_methods/"}},m={},u=[{value:"Summary statistics",id:"summary-statistics",level:2},{value:"Summary",id:"summary",level:3},{value:"Covariate Balance",id:"covariate-balance",level:2},{value:"Understanding the model",id:"understanding-the-model",level:2},{value:"Visualization post adjustments",id:"visualization-post-adjustments",level:2},{value:"Distribution of Weights",id:"distribution-of-weights",level:2},{value:"Analyzing the outcome",id:"analyzing-the-outcome",level:2}],p={toc:u};function c(e){var t=e.components,s=(0,r.A)(e,o);return(0,i.mdx)("wrapper",(0,a.A)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"After weights are fitted in order to balance the sample, the results should be evaluated so to understand the quality of the weighting."),(0,i.mdx)("h2",{id:"summary-statistics"},"Summary statistics"),(0,i.mdx)("h3",{id:"summary"},"Summary"),(0,i.mdx)("p",null,"Printing the adjusted object gives a high level overview of the content of the object:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"print(adjusted)\n")),(0,i.mdx)("p",null,"Output:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"Adjusted balance Sample object with target set using ipw\n1000 observations x 3 variables: gender,age_group,income\nid_column: id, weight_column: weight,\noutcome_columns: happiness\n\n    target:\n\n    balance Sample object\n    10000 observations x 3 variables: gender,age_group,income\n    id_column: id, weight_column: weight,\n    outcome_columns: None\n\n    3 common variables: income,age_group,gender\n")),(0,i.mdx)("p",null,"To generate a summary of the data, use the summary method:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"print(adjusted.summary())\n")),(0,i.mdx)("p",null,"This will return several results:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},'Covariate mean ASMD improvement: ASMD is "Absolute Standardized Mean Difference". For continuous variables, this measure is the same as taking the absolute value of ',(0,i.mdx)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Effect_size#Cohen's_d"},"Cohen's d statistic")," (also related to ",(0,i.mdx)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Strictly_standardized_mean_difference"},"SSMD"),"), when using the (weighted) standard deviation of the target population. For categorical variables it uses ",(0,i.mdx)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/One-hot"},"one-hot encoding"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Design_effect"},"Design effect")),(0,i.mdx)("li",{parentName:"ul"},"Covariate mean Adjusted Standardized Mean Deviation (ASMD) versus Unadjusted covariate mean ASMD"),(0,i.mdx)("li",{parentName:"ul"},"Model proportion deviance explained (if inverese propensity weighting method was used)")),(0,i.mdx)("p",null,"Output:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"Covar ASMD reduction: 62.3%, design effect: 2.249\nCovar ASMD (7 variables): 0.335 -> 0.126\nModel performance: Model proportion deviance explained: 0.174\n")),(0,i.mdx)("p",null,"Note that although we had 3 variables in our original data (age_group, gender, income), the asmd counts each level of the categorical variables as separate variable, and thus it considered 7 variables for the covar ASMD improvement."),(0,i.mdx)("h2",{id:"covariate-balance"},"Covariate Balance"),(0,i.mdx)("p",null,"We can check the mean of each variable before and after applying the weights using ",(0,i.mdx)("inlineCode",{parentName:"p"},".mean()"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"adjusted.covars().mean().T\n")),(0,i.mdx)("p",null,"To get:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"source                     self     target  unadjusted\n_is_na_gender[T.True]  0.103449   0.089800     0.08800\nage_group[T.25-34]     0.279072   0.297400     0.30900\nage_group[T.35-44]     0.290137   0.299200     0.17200\nage_group[T.45+]       0.150714   0.206300     0.04600\ngender[Female]         0.410664   0.455100     0.26800\ngender[Male]           0.485887   0.455100     0.64400\ngender[_NA]            0.103449   0.089800     0.08800\nincome                 9.519935  12.737608     5.99102\n")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"self")," is the adjusted ASMD, while ",(0,i.mdx)("inlineCode",{parentName:"p"},"unadjusted")," is the unadjusted ASMD."),(0,i.mdx)("p",null,"And ",(0,i.mdx)("inlineCode",{parentName:"p"},".asmd()")," to get ASMD:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"adjusted.covars().asmd().T\n")),(0,i.mdx)("p",null,"To get:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"source                  self  unadjusted  unadjusted - self\nage_group[T.25-34]  0.040094    0.025375          -0.014719\nage_group[T.35-44]  0.019792    0.277771           0.257980\nage_group[T.45+]    0.137361    0.396127           0.258765\ngender[Female]      0.089228    0.375699           0.286472\ngender[Male]        0.061820    0.379314           0.317494\ngender[_NA]         0.047739    0.006296          -0.041444\nincome              0.246918    0.517721           0.270802\nmean(asmd)          0.126310    0.334860           0.208551\n")),(0,i.mdx)("p",null,"We can see that on average the ASMD improved from 0.33 to 0.12 thanks to the weights. We got improvements in income, gender, and age_group.\nAlthough we can see that ",(0,i.mdx)("inlineCode",{parentName:"p"},"age_group[T.25-34]")," didn't get improved."),(0,i.mdx)("h2",{id:"understanding-the-model"},"Understanding the model"),(0,i.mdx)("p",null,"For a summary of the diagnostics measures, use:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"adjusted.diagnostics()\n")),(0,i.mdx)("p",null,"This will give a long table that can be filterred to focus on various diagnostics metrics. For example, when the ",(0,i.mdx)("inlineCode",{parentName:"p"},".adjust()")," method is run with ",(0,i.mdx)("inlineCode",{parentName:"p"},'model="ipw"')," (the default method), then the rows from the diagnostics output with ",(0,i.mdx)("inlineCode",{parentName:"p"},'metric == "model_coef"')," represent the coefficients of the variables in the model. These can be used to understand the model that was fitted (after transformations and regularization)."),(0,i.mdx)("h2",{id:"visualization-post-adjustments"},"Visualization post adjustments"),(0,i.mdx)("p",null,"We can create all (interactive) plots using:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"adjusted.covars().plot()\n")),(0,i.mdx)("p",null,"And get:"),(0,i.mdx)("p",null,(0,i.mdx)("img",{src:n(69720).A,width:"1803",height:"450"})),(0,i.mdx)("p",null,(0,i.mdx)("img",{src:n(26348).A,width:"1803",height:"450"})),(0,i.mdx)("p",null,(0,i.mdx)("img",{src:n(52345).A,width:"1803",height:"450"})),(0,i.mdx)("p",null,'We can also use different plots, using the seaborn library, for example with the "kde" dist_type.'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'adjusted.covars().plot(library = "seaborn", dist_type = "kde")\n')),(0,i.mdx)("p",null,"And get:"),(0,i.mdx)("p",null,(0,i.mdx)("img",{src:n(95256).A,width:"448",height:"1204"})),(0,i.mdx)("h2",{id:"distribution-of-weights"},"Distribution of Weights"),(0,i.mdx)("p",null,"We can look at the distribution of weights using the following method call:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"adjusted.weights().plot()\n")),(0,i.mdx)("p",null,"And get:"),(0,i.mdx)("p",null,(0,i.mdx)("img",{src:n(58720).A,width:"445",height:"443"})),(0,i.mdx)("p",null,"Or calculate the design effect using:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"adjusted.weights().design_effect()\n# 2.24937\n")),(0,i.mdx)("h2",{id:"analyzing-the-outcome"},"Analyzing the outcome"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},".summary()")," method gives us the response rates (if we have missing values in the outcome), and the weighted means before and after applying the weights:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"print(adjust.outcomes().summary())\n")),(0,i.mdx)("p",null,"To get:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"\n1 outcomes: ['happiness']\nMean outcomes:\n            happiness\nsource\nself        54.221388\nunadjusted  48.392784\n\nResponse rates (relative to number of respondents in sample):\n   happiness\nn     1000.0\n%      100.0\n")),(0,i.mdx)("p",null,"For example, we see that the estimated mean happiness according to our sample is 48 without any adjustment and 54 with adjustment.  The following shows the distribution of happinnes before and after applying the weights:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"adjusted.outcomes().plot()\n")),(0,i.mdx)("p",null,"And we get:"),(0,i.mdx)("p",null,(0,i.mdx)("img",{src:n(25404).A,width:"450",height:"443"})))}c.isMDXComponent=!0},69720:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/fig_04_qqplot_income_after-f7333aae22d068c3122561dd1755681f.png"},26348:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/fig_05_barplot_age_after-2ca299aaf9256d47fcd1d5b7cb771f03.png"},52345:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/fig_06_barplot_gender_after-a7f7770c95b6491c10db328d5932d87a.png"},95256:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/fig_07_seaborn_after-ac7514f6b150f431b36329bb9ebd9d0a.png"},58720:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/fig_08_weights_kde-e77811f8a4358f4e63395e304cd46304.png"},25404:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/fig_09_seaborn_outcome_kde_after-26fa9668164349253b2614335961ade9.png"}}]);